@* ----------------------------------------------------------------------------------
    File: Tenants.razor
    Path: src/Web/EastSeat.ResourceIdea.Web/Components/Pages/Backend/Tenants.razor
    Description: Backend tenant management page for Developer/Support users
   ---------------------------------------------------------------------------------- *@

@page "/backend/tenants"
@layout BackendLayout
@attribute [BackendAccess]

@using EastSeat.ResourceIdea.Web.Authorization
@using EastSeat.ResourceIdea.Web.Components.Base

@inherits ResourceIdeaComponentBase

<ResourceIdeaPageTitle>Tenant Management</ResourceIdeaPageTitle>

<div class="backend-tenants">
    <div class="page-header">
        <h1><i class="fas fa-building"></i> Tenant Management</h1>
        <p class="lead">Manage all tenant organizations and their subscriptions</p>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="search-box">
                <input type="text" class="form-control" placeholder="Search tenants by name, domain, or status..." 
                       @bind="searchTerm" @onkeyup="FilterTenants" />
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="statusFilter" @bind:after="FilterTenants">
                <option value="">All Status</option>
                <option value="Active">Active</option>
                <option value="Suspended">Suspended</option>
                <option value="Trial">Trial</option>
            </select>
        </div>
        <div class="col-md-3 text-end">
            <button class="btn btn-primary" @onclick="ShowCreateTenantModal">
                <i class="fas fa-plus"></i> Create Tenant
            </button>
        </div>
    </div>

    @if (IsLoadingPage)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading tenants...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var tenant in filteredTenants)
            {
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="card tenant-card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">@tenant.Name</h6>
                            <span class="badge @GetStatusBadgeClass(tenant.Status)">
                                @tenant.Status
                            </span>
                        </div>
                        <div class="card-body">
                            <div class="tenant-info">
                                <div class="info-item">
                                    <small class="text-muted">Domain</small>
                                    <div>@tenant.Domain</div>
                                </div>
                                <div class="info-item">
                                    <small class="text-muted">Users</small>
                                    <div>@tenant.UserCount users</div>
                                </div>
                                <div class="info-item">
                                    <small class="text-muted">Plan</small>
                                    <div>@tenant.SubscriptionPlan</div>
                                </div>
                                <div class="info-item">
                                    <small class="text-muted">Created</small>
                                    <div>@tenant.CreatedAt.ToString("MMM dd, yyyy")</div>
                                </div>
                                <div class="info-item">
                                    <small class="text-muted">Last Activity</small>
                                    <div>@(tenant.LastActivity?.ToString("MMM dd, yyyy") ?? "Never")</div>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="btn-group btn-group-sm w-100">
                                <button class="btn btn-outline-primary" @onclick="() => ViewTenant(tenant.Id)">
                                    <i class="fas fa-eye"></i> View
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="() => EditTenant(tenant.Id)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-outline-info" @onclick="() => ViewTenantData(tenant.Id)">
                                    <i class="fas fa-database"></i> Data
                                </button>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-warning dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-cog"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" @onclick="() => SuspendTenant(tenant.Id)">
                                            <i class="fas fa-pause"></i> Suspend
                                        </a></li>
                                        <li><a class="dropdown-item" @onclick="() => ActivateTenant(tenant.Id)">
                                            <i class="fas fa-play"></i> Activate
                                        </a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item text-danger" @onclick="() => DeleteTenant(tenant.Id)">
                                            <i class="fas fa-trash"></i> Delete
                                        </a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!filteredTenants.Any())
        {
            <div class="text-center py-5">
                <i class="fas fa-building fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No tenants found</h5>
                <p class="text-muted">Try adjusting your search criteria or create a new tenant.</p>
            </div>
        }

        <!-- Summary Statistics -->
        <div class="row mt-5">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-chart-bar"></i> Tenant Statistics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3 text-center">
                                <div class="stat-item">
                                    <div class="stat-value text-primary">@allTenants.Count</div>
                                    <div class="stat-label">Total Tenants</div>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="stat-item">
                                    <div class="stat-value text-success">@allTenants.Count(t => t.Status == "Active")</div>
                                    <div class="stat-label">Active Tenants</div>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="stat-item">
                                    <div class="stat-value text-warning">@allTenants.Count(t => t.Status == "Trial")</div>
                                    <div class="stat-label">Trial Tenants</div>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="stat-item">
                                    <div class="stat-value text-info">@allTenants.Sum(t => t.UserCount)</div>
                                    <div class="stat-label">Total Users</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<TenantListItem> allTenants = new();
    private List<TenantListItem> filteredTenants = new();
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ExecuteAsync(async () =>
        {
            await LoadTenants();
        }, "Loading tenants");
    }

    private async Task LoadTenants()
    {
        // Simulate loading tenant data
        await Task.Delay(300);

        // Sample tenant data - in real implementation, this would come from a service
        allTenants = new List<TenantListItem>
        {
            new()
            {
                Id = Guid.NewGuid(),
                Name = "Acme Corporation",
                Domain = "acme.com",
                Status = "Active",
                UserCount = 45,
                SubscriptionPlan = "Enterprise",
                CreatedAt = DateTime.Now.AddYears(-2),
                LastActivity = DateTime.Now.AddDays(-1)
            },
            new()
            {
                Id = Guid.NewGuid(),
                Name = "Tech Innovations Ltd",
                Domain = "techinnovations.com",
                Status = "Active",
                UserCount = 28,
                SubscriptionPlan = "Professional",
                CreatedAt = DateTime.Now.AddMonths(-8),
                LastActivity = DateTime.Now.AddHours(-4)
            },
            new()
            {
                Id = Guid.NewGuid(),
                Name = "StartupXYZ",
                Domain = "startupxyz.io",
                Status = "Trial",
                UserCount = 12,
                SubscriptionPlan = "Trial",
                CreatedAt = DateTime.Now.AddDays(-15),
                LastActivity = DateTime.Now.AddMinutes(-30)
            },
            new()
            {
                Id = Guid.NewGuid(),
                Name = "Global Consulting Group",
                Domain = "globalconsulting.org",
                Status = "Suspended",
                UserCount = 67,
                SubscriptionPlan = "Enterprise",
                CreatedAt = DateTime.Now.AddYears(-1),
                LastActivity = DateTime.Now.AddDays(-30)
            },
            new()
            {
                Id = Guid.NewGuid(),
                Name = "Creative Agency",
                Domain = "creativeagency.design",
                Status = "Active",
                UserCount = 19,
                SubscriptionPlan = "Professional",
                CreatedAt = DateTime.Now.AddMonths(-6),
                LastActivity = DateTime.Now.AddDays(-2)
            }
        };

        FilterTenants();
    }

    private void FilterTenants()
    {
        filteredTenants = allTenants.Where(t =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             t.Domain.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(statusFilter) || t.Status == statusFilter)
        ).ToList();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success",
            "Trial" => "bg-warning",
            "Suspended" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private void ShowCreateTenantModal()
    {
        Navigation.NavigateTo("/backend/tenants/create");
    }

    private void ViewTenant(Guid tenantId)
    {
        Navigation.NavigateTo($"/backend/tenants/{tenantId}");
    }

    private void EditTenant(Guid tenantId)
    {
        Navigation.NavigateTo($"/backend/tenants/{tenantId}/edit");
    }

    private void ViewTenantData(Guid tenantId)
    {
        Navigation.NavigateTo($"/backend/tenants/{tenantId}/data");
    }

    private async Task SuspendTenant(Guid tenantId)
    {
        await ExecuteAsync(async () =>
        {
            // Implement suspend tenant functionality
            await Task.Delay(100);
            await LoadTenants(); // Refresh the list
        }, "Suspending tenant");
    }

    private async Task ActivateTenant(Guid tenantId)
    {
        await ExecuteAsync(async () =>
        {
            // Implement activate tenant functionality
            await Task.Delay(100);
            await LoadTenants(); // Refresh the list
        }, "Activating tenant");
    }

    private async Task DeleteTenant(Guid tenantId)
    {
        await ExecuteAsync(async () =>
        {
            // Implement delete tenant functionality
            await Task.Delay(100);
            await LoadTenants(); // Refresh the list
        }, "Deleting tenant");
    }

    private class TenantListItem
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Domain { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public int UserCount { get; set; }
        public string SubscriptionPlan { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public DateTime? LastActivity { get; set; }
    }
}

<style>
    .backend-tenants {
        padding: 20px;
    }

    .page-header {
        margin-bottom: 30px;
        border-bottom: 1px solid #dee2e6;
        padding-bottom: 20px;
    }

    .page-header h1 {
        color: #2c3e50;
        margin-bottom: 10px;
    }

    .tenant-card {
        height: 100%;
        transition: transform 0.2s ease-in-out;
    }

    .tenant-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .tenant-info .info-item {
        margin-bottom: 8px;
    }

    .tenant-info .info-item small {
        font-size: 0.75rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-item {
        padding: 20px 0;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        line-height: 1;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-top: 5px;
    }
</style>