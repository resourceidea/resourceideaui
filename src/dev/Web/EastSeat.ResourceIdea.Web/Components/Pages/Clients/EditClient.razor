@page "/clients/edit/{Id:guid}"

@using Microsoft.AspNetCore.Components.Forms

<ResourceIdeaPageTitle Title="Edit Client" />

<PageHeader Text="Edit Client" />

<NavLink class="btn btn-outline-dark btn-sm mt-2 mb-2" href="/clients" ActiveClass="">
    <i class="fa fa-chevron-left"></i> Back
</NavLink>

@if (IsLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (HasError)
{
    <DismissibleAlert ErrorMessage="@ErrorMessage" IsErrorMessage="true" />
}
else if (Command != null)
{
    <div class="card">
        <div class="card-header">
            <h5 class="card-title">Edit Client Details</h5>
        </div>
        <EditForm class="card-body" Model="@Command" OnValidSubmit="HandleValidSubmit">
            <div class="row">
                <div class="col-12">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="name">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="Command.Name" />
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="City">City</label>
                                <InputText id="City" class="form-control" @bind-Value="City" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="Street">Street</label>
                                <InputText id="Street" class="form-control" @bind-Value="Street" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="Building">Building</label>
                                <InputText id="Building" class="form-control" @bind-Value="Building" />
                            </div>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary btn-sm">Save</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UpdateClientCommand? Command;
    private string City = string.Empty;
    private string Street = string.Empty;
    private string Building = string.Empty;
    private bool IsLoading = true;
    private bool HasError = false;
    private string ErrorMessage = string.Empty;

    [Inject] public IMediator Mediator { get; set; } = default!;
    [Inject] public NavigationManager Navigation { get; set; } = default!;
    [Inject] public IResourceIdeaRequestContext RequestContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GetClientByIdQuery query = new()
            {
                ClientId = ClientId.Create(Id),
                TenantId = RequestContext.Tenant
            };

            var response = await Mediator.Send(query);
            if (response.IsFailure || response.Content is null)
            {
                HasError = true;
                ErrorMessage = "Failed to load client details.";
            }
            else
            {
                var client = response.Content;
                Command = new UpdateClientCommand
                {
                    ClientId = client.ClientId,
                    Name = client.Name,
                    Address = client.Address,
                    TenantId = client.TenantId
                };
                City = client.Address.City;
                Street = client.Address.Street;
                Building = client.Address.Building;
            }
        }
        catch (InvalidOperationException ex)
        {
            HasError = true;
            ErrorMessage = "An invalid operation occurred: " + ex.Message;
        }
        catch (ArgumentException ex)
        {
            HasError = true;
            ErrorMessage = "An argument error occurred: " + ex.Message;
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = "An unexpected error occurred: " + ex.Message;
            throw; // Rethrow unexpected exceptions
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Command is null)
        {
            return;
        }
        
        Command.Address = Address.Create(Building, Street, City);
        var result = await Mediator.Send(Command);
        if (result.IsSuccess)
        {
            Navigation.NavigateTo($"/clients/{Command.ClientId.Value}");
        }
        else
        {
            HasError = true;
            ErrorMessage = result.Error.ToString();
        }
    }
}
