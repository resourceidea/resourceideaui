@page "/workitems/{Id:guid}"

@using Microsoft.AspNetCore.WebUtilities
@using EastSeat.ResourceIdea.Application.Features.WorkItems.Queries
@using EastSeat.ResourceIdea.Application.Features.Engagements.Queries
@using EastSeat.ResourceIdea.Application.Features.Clients.Queries
@using EastSeat.ResourceIdea.Domain.WorkItems.ValueObjects
@using EastSeat.ResourceIdea.Domain.Engagements.ValueObjects
@using EastSeat.ResourceIdea.Domain.Clients.ValueObjects
@using EastSeat.ResourceIdea.Domain.Enums
@using EastSeat.ResourceIdea.Web.RequestContext
@using MediatR

<ResourceIdeaPageTitle Title="Work Item Details" />

<div class="page-container">

    @if (IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (HasError)
    {
        <DismissibleAlert ErrorMessage="@ErrorMessage" IsErrorMessage="true" />
    }
    else if (WorkItem != null)
    {
        <PageHeader Text=@($"Work Item: {WorkItem.Title}") />

        <div class="mt-2 mb-2">
            @* Back navigation button *@
            <NavLink class="btn btn-outline-dark btn-sm" href="@GetBackNavigationUrl()" ActiveClass="">
                <i class="fa fa-chevron-left"></i> @GetBackButtonText()
            </NavLink>
            @* Edit button - disabled if completed *@
            @if (WorkItem.Status != WorkItemStatus.Completed)
            {
                <NavLink class="btn btn-primary btn-sm ms-2" href=@($"/workitems/edit/{WorkItem.Id.Value}?engagementId={EngagementId}&clientId={ClientId}") ActiveClass="">
                    <i class="fa-solid fa-pen-to-square"></i> Edit
                </NavLink>
            }
            else
            {
                <button type="button" class="btn btn-secondary btn-sm ms-2" disabled>
                    <i class="fa-solid fa-pen-to-square"></i> Edit (Completed)
                </button>
            }
        </div>

        <hr/>

        @* Work Item Information *@
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Work Item Information</h6>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-4">Title:</dt>
                            <dd class="col-sm-8">@WorkItem.Title</dd>
                            
                            <dt class="col-sm-4">Description:</dt>
                            <dd class="col-sm-8">
                                @if (!string.IsNullOrEmpty(WorkItem.Description))
                                {
                                    @WorkItem.Description
                                }
                                else
                                {
                                    <span class="text-muted">No description</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-4">Status:</dt>
                            <dd class="col-sm-8">
                                <span class="badge @GetStatusBadgeClass(WorkItem.Status)">
                                    @WorkItem.Status.ToString()
                                </span>
                            </dd>
                            
                            <dt class="col-sm-4">Priority:</dt>
                            <dd class="col-sm-8">
                                <span class="badge @GetPriorityBadgeClass(WorkItem.Priority)">
                                    @GetPriorityText(WorkItem.Priority)
                                </span>
                            </dd>
                            
                            <dt class="col-sm-4">Start Date:</dt>
                            <dd class="col-sm-8">
                                @if (WorkItem.StartDate.HasValue)
                                {
                                    @WorkItem.StartDate.Value.ToString("MMM dd, yyyy")
                                }
                                else
                                {
                                    <span class="text-muted">Not started</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-4">Completed Date:</dt>
                            <dd class="col-sm-8">
                                @if (WorkItem.CompletedDate.HasValue)
                                {
                                    @WorkItem.CompletedDate.Value.ToString("MMM dd, yyyy")
                                }
                                else
                                {
                                    <span class="text-muted">Not completed</span>
                                }
                            </dd>

                            <dt class="col-sm-4">Assigned To:</dt>
                            <dd class="col-sm-8">
                                @if (!string.IsNullOrEmpty(WorkItem.AssignedToName))
                                {
                                    @WorkItem.AssignedToName
                                }
                                else
                                {
                                    <span class="text-muted">Unassigned</span>
                                }
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Engagement & Client</h6>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-4">Engagement:</dt>
                            <dd class="col-sm-8">
                                <NavLink href=@($"/engagements/{EngagementId}") ActiveClass="">
                                    @EngagementName
                                </NavLink>
                            </dd>
                            
                            <dt class="col-sm-4">Client:</dt>
                            <dd class="col-sm-8">
                                <NavLink href=@($"/clients/{ClientId}") ActiveClass="">
                                    @ClientName
                                </NavLink>
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private WorkItemModel? WorkItem;
    private string EngagementName = string.Empty;
    private string ClientName = string.Empty;
    private string EngagementId = string.Empty;
    private string ClientId = string.Empty;
    private string NavigationSource = string.Empty;
    private bool IsLoading = true;
    private bool HasError = false;
    private string ErrorMessage = string.Empty;

    [Inject] public IMediator Mediator { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public IResourceIdeaRequestContext RequestContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Parse query parameters to determine navigation source
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);
        
        if (queryParams.TryGetValue("from", out var fromValue))
        {
            NavigationSource = fromValue.ToString();
        }
        
        if (queryParams.TryGetValue("engagementId", out var engagementIdValue))
        {
            EngagementId = engagementIdValue.ToString();
        }
        
        if (queryParams.TryGetValue("clientId", out var clientIdValue))
        {
            ClientId = clientIdValue.ToString();
        }

        await LoadWorkItemAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != Guid.Empty)
        {
            await LoadWorkItemAsync();
        }
    }

    private async Task LoadWorkItemAsync()
    {
        try
        {
            // Load work item details
            GetWorkItemByIdQuery workItemQuery = new()
            {
                WorkItemId = WorkItemId.Create(Id),
                TenantId = RequestContext.Tenant
            };

            var workItemResponse = await Mediator.Send(workItemQuery);
            if (workItemResponse.IsFailure || !workItemResponse.Content.HasValue)
            {
                HasError = true;
                ErrorMessage = GetErrorMessage(workItemResponse.Error);
                return;
            }

            WorkItem = workItemResponse.Content.Value;

            // Load engagement details to get engagement name and client id
            GetEngagementByIdQuery engagementQuery = new()
            {
                EngagementId = WorkItem.EngagementId
            };

            var engagementResponse = await Mediator.Send(engagementQuery);
            if (engagementResponse.IsFailure || !engagementResponse.Content.HasValue)
            {
                HasError = true;
                ErrorMessage = "Failed to load engagement details.";
                return;
            }

            var engagement = engagementResponse.Content.Value;
            EngagementName = engagement.Description;
            if (string.IsNullOrEmpty(EngagementId))
            {
                EngagementId = engagement.Id.Value.ToString();
            }

            // Load client details to get client name
            GetClientByIdQuery clientQuery = new()
            {
                ClientId = engagement.ClientId,
                TenantId = RequestContext.Tenant
            };

            var clientResponse = await Mediator.Send(clientQuery);
            if (clientResponse.IsFailure || !clientResponse.Content.HasValue)
            {
                HasError = true;
                ErrorMessage = "Failed to load client details.";
                return;
            }

            var client = clientResponse.Content.Value;
            ClientName = client.Name;
            if (string.IsNullOrEmpty(ClientId))
            {
                ClientId = client.ClientId.Value.ToString();
            }
        }
        catch (InvalidOperationException ex)
        {
            HasError = true;
            ErrorMessage = "An invalid operation occurred while loading the work item details: " + ex.Message;
        }
        catch (ArgumentException ex)
        {
            HasError = true;
            ErrorMessage = "An argument error occurred while loading the work item details: " + ex.Message;
        }
        catch (Exception ex) when (ex is not InvalidOperationException && ex is not ArgumentException)
        {
            HasError = true;
            ErrorMessage = "An unexpected error occurred. Please try again later.";
            Console.Error.WriteLine($"Unexpected error: {ex}"); // Replace with proper logging
            throw;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusBadgeClass(WorkItemStatus status)
    {
        return status switch
        {
            WorkItemStatus.NotStarted => "bg-secondary",
            WorkItemStatus.InProgress => "bg-primary",
            WorkItemStatus.OnHold => "bg-warning text-dark",
            WorkItemStatus.Completed => "bg-success",
            WorkItemStatus.Canceled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(int priority)
    {
        return priority switch
        {
            1 => "bg-danger",
            2 => "bg-warning text-dark",
            3 => "bg-primary",
            4 => "bg-info text-dark",
            5 => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityText(int priority)
    {
        return priority switch
        {
            1 => "1 - Highest",
            2 => "2 - High",
            3 => "3 - Medium",
            4 => "4 - Low",
            5 => "5 - Lowest",
            _ => $"{priority} - Unknown"
        };
    }

    private string GetBackButtonText()
    {
        return NavigationSource switch
        {
            "engagement" => "Back to engagement details",
            "client" => "Back to client details",
            "workitems" => "Back to work items list",
            _ => "Back to work items list" // Default fallback
        };
    }

    private string GetBackNavigationUrl()
    {
        return NavigationSource switch
        {
            "engagement" when !string.IsNullOrEmpty(EngagementId) => $"/engagements/{EngagementId}",
            "client" when !string.IsNullOrEmpty(ClientId) => $"/clients/{ClientId}",
            "workitems" => BuildWorkItemsListUrl(),
            _ => BuildWorkItemsListUrl() // Default fallback
        };
    }

    private string BuildWorkItemsListUrl()
    {
        var url = "/workitems";
        var queryParams = new List<string>();
        
        if (!string.IsNullOrEmpty(EngagementId))
        {
            queryParams.Add($"engagementId={EngagementId}");
        }
        
        if (!string.IsNullOrEmpty(ClientId))
        {
            queryParams.Add($"clientId={ClientId}");
        }
        
        if (queryParams.Any())
        {
            url += "?" + string.Join("&", queryParams);
        }
        
        return url;
    }

    private static string GetErrorMessage(ErrorCode errorCode)
    {
        return errorCode switch
        {
            ErrorCode.NotFound => "Work item not found.",
            ErrorCode.DataStoreQueryFailure => "Failed to query work item details from the data store.",
            ErrorCode.BadRequest => "Invalid request to load work item details.",
            _ => "Failed to load work item details."
        };
    }
}