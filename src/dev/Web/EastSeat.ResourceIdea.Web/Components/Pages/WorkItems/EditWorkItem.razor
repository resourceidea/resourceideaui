@page "/workitems/edit/{Id:guid}"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@using EastSeat.ResourceIdea.Application.Features.WorkItems.Commands
@using EastSeat.ResourceIdea.Application.Features.WorkItems.Queries
@using EastSeat.ResourceIdea.Application.Features.Engagements.Queries
@using EastSeat.ResourceIdea.Application.Features.Clients.Queries
@using EastSeat.ResourceIdea.Domain.WorkItems.ValueObjects
@using EastSeat.ResourceIdea.Domain.Engagements.ValueObjects
@using EastSeat.ResourceIdea.Domain.Clients.ValueObjects
@using EastSeat.ResourceIdea.Domain.Enums
@using EastSeat.ResourceIdea.Web.Services
@using EastSeat.ResourceIdea.Web.RequestContext
@using MediatR

<ResourceIdeaPageTitle Title="Edit Work Item" />

<PageHeader Text="Edit Work Item" />

<NavLink class="btn btn-outline-dark btn-sm mt-2 mb-2" href="@GetBackNavigationUrl()" ActiveClass="">
    <i class="fa fa-chevron-left"></i> Back to details
</NavLink>

@if (IsLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (HasError)
{
    <DismissibleAlert ErrorMessage="@ErrorMessage" IsErrorMessage="true" />
}
else if (Command != null && !IsWorkItemCompleted)
{
    <div class="card">
        <div class="card-header">
            <h5 class="card-title">Edit Work Item Details</h5>
        </div>
        <EditForm class="card-body" Model="@Command" OnValidSubmit="HandleValidSubmit">
            <div class="row">
                <div class="col-12">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <!-- Hidden fields for engagement and client IDs -->
                    <input type="hidden" @bind="Command.EngagementId" />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="engagementName">Engagement</label>
                                <input id="engagementName" class="form-control" value="@EngagementName" readonly />
                                <small class="form-text text-muted">Engagement cannot be changed</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="clientName">Client</label>
                                <input id="clientName" class="form-control" value="@ClientName" readonly />
                                <small class="form-text text-muted">Client cannot be changed</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="title">Title</label>
                                <InputText id="title" class="form-control" @bind-Value="Command.Title" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="description">Description</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="Command.Description" rows="3" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-2">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="status">Status</label>
                                <InputSelect id="status" class="form-control" @bind-Value="Command.Status">
                                    <option value="@WorkItemStatus.NotStarted">Not Started</option>
                                    <option value="@WorkItemStatus.InProgress">In Progress</option>
                                    <option value="@WorkItemStatus.OnHold">On Hold</option>
                                    <option value="@WorkItemStatus.Completed">Completed</option>
                                    <option value="@WorkItemStatus.Canceled">Canceled</option>
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="priority">Priority</label>
                                <InputSelect id="priority" class="form-control" @bind-Value="Command.Priority">
                                    <option value="1">1 - Highest</option>
                                    <option value="2">2 - High</option>
                                    <option value="3">3 - Medium</option>
                                    <option value="4">4 - Low</option>
                                    <option value="5">5 - Lowest</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="startDate">Start Date</label>
                                <InputDate id="startDate" class="form-control" @bind-Value="StartDate" disabled="@CannotEditStartDate" />
                                @if (CannotEditStartDate)
                                {
                                    <small class="form-text text-muted">Start date can only be edited when status is Not Started</small>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="completedDate">End Date</label>
                                <InputDate id="completedDate" class="form-control" @bind-Value="CompletedDate" disabled="@CannotEditEndDate" />
                                @if (CannotEditEndDate)
                                {
                                    <small class="form-text text-muted">End date can only be edited when status is Not Started, In Progress or On Hold</small>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary btn-sm" disabled="@IsSubmitting">
                            @if (IsSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Saving...</span>
                            }
                            else
                            {
                                <span>Save</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}
else if (IsWorkItemCompleted)
{
    <div class="alert alert-warning" role="alert">
        <h5 class="alert-heading">Work Item Completed</h5>
        <p>This work item has been completed and cannot be edited.</p>
        <hr>
        <p class="mb-0">
            <NavLink class="btn btn-primary btn-sm" href="@GetBackNavigationUrl()">
                <i class="fa fa-chevron-left"></i> Back to details
            </NavLink>
        </p>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UpdateWorkItemCommand? Command;
    private string EngagementName = string.Empty;
    private string ClientName = string.Empty;
    private string ClientId = string.Empty;
    private string EngagementId = string.Empty;
    private DateTimeOffset? StartDate;
    private DateTimeOffset? CompletedDate;
    private bool IsLoading = true;
    private bool IsSubmitting = false;
    private bool HasError = false;
    private string ErrorMessage = string.Empty;
    private bool IsWorkItemCompleted = false;

    [Inject] public IMediator Mediator { get; set; } = default!;
    [Inject] public NavigationManager Navigation { get; set; } = default!;
    [Inject] public IResourceIdeaRequestContext RequestContext { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;

    // Business rule properties
    private bool CannotEditStartDate => Command?.Status != WorkItemStatus.NotStarted;
    private bool CannotEditEndDate => Command?.Status != WorkItemStatus.NotStarted && 
                                      Command?.Status != WorkItemStatus.InProgress && 
                                      Command?.Status != WorkItemStatus.OnHold;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load work item details
            GetWorkItemByIdQuery workItemQuery = new()
            {
                WorkItemId = WorkItemId.Create(Id),
                TenantId = RequestContext.Tenant
            };

            var workItemResponse = await Mediator.Send(workItemQuery);
            if (workItemResponse.IsFailure || !workItemResponse.Content.HasValue)
            {
                HasError = true;
                ErrorMessage = "Failed to load work item details.";
                return;
            }

            var workItem = workItemResponse.Content.Value;

            // Check if work item is completed
            if (workItem.Status == WorkItemStatus.Completed)
            {
                IsWorkItemCompleted = true;
                IsLoading = false;
                return;
            }

            // Load engagement details to get engagement name and client id
            GetEngagementByIdQuery engagementQuery = new()
            {
                EngagementId = workItem.EngagementId
            };

            var engagementResponse = await Mediator.Send(engagementQuery);
            if (engagementResponse.IsFailure || !engagementResponse.Content.HasValue)
            {
                HasError = true;
                ErrorMessage = "Failed to load engagement details.";
                return;
            }

            var engagement = engagementResponse.Content.Value;
            EngagementName = engagement.Description;
            EngagementId = engagement.Id.Value.ToString();

            // Load client details to get client name
            GetClientByIdQuery clientQuery = new()
            {
                ClientId = engagement.ClientId,
                TenantId = RequestContext.Tenant
            };

            var clientResponse = await Mediator.Send(clientQuery);
            if (clientResponse.IsFailure || !clientResponse.Content.HasValue)
            {
                HasError = true;
                ErrorMessage = "Failed to load client details.";
                return;
            }

            var client = clientResponse.Content.Value;
            ClientName = client.Name;
            ClientId = client.ClientId.Value.ToString();

            // Initialize command
            Command = new UpdateWorkItemCommand
            {
                WorkItemId = workItem.Id,
                TenantId = workItem.TenantId,
                EngagementId = workItem.EngagementId,
                Title = workItem.Title,
                Description = workItem.Description,
                Status = workItem.Status,
                Priority = (int)workItem.Priority,
                AssignedToId = workItem.AssignedToId
            };

            StartDate = workItem.StartDate;
            CompletedDate = workItem.CompletedDate;
        }
        catch (InvalidOperationException ex)
        {
            HasError = true;
            ErrorMessage = "An invalid operation occurred while loading the work item details: " + ex.Message;
        }
        catch (ArgumentException ex)
        {
            HasError = true;
            ErrorMessage = "An argument error occurred while loading the work item details: " + ex.Message;
        }
        catch (Exception ex) when (ex is not InvalidOperationException && ex is not ArgumentException)
        {
            HasError = true;
            ErrorMessage = "An unexpected error occurred while loading the work item details.";
            Console.Error.WriteLine($"Unexpected error: {ex}");
            throw; // Rethrow the exception to ensure it is not silently swallowed
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Command is null)
        {
            return;
        }

        try
        {
            IsSubmitting = true;

            // Update command with date values
            Command.StartDate = StartDate;
            Command.CompletedDate = CompletedDate;

            var result = await Mediator.Send(Command);
            if (result.IsSuccess)
            {
                NotificationService.ShowSuccessNotification("Work item details updated successfully.");
                // Navigate back to work item details
                Navigation.NavigateTo(GetBackNavigationUrl());
            }
            else
            {
                NotificationService.ShowErrorNotification("Failed to update work item details. Please try again.");
            }
        }
        catch (InvalidOperationException ex)
        {
            NotificationService.ShowErrorNotification("An invalid operation occurred. Please check your input and try again.");
            // Log the exception if necessary
        }
        catch (TaskCanceledException ex)
        {
            NotificationService.ShowErrorNotification("The operation was canceled. Please try again.");
            // Log the exception if necessary
        }
        catch (Exception ex)
        {
            NotificationService.ShowErrorNotification("An unexpected error occurred. Please try again.");
            // Log the exception for debugging purposes
            Console.Error.WriteLine($"Unexpected error: {ex}");
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private string GetBackNavigationUrl()
    {
        // Parse query parameters to determine navigation context
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);
        
        var backUrl = $"/workitems/{Id}";
        
        // Add context parameters if available
        var queryString = new List<string>();
        
        if (!string.IsNullOrEmpty(EngagementId))
        {
            queryString.Add($"engagementId={EngagementId}");
        }
        
        if (!string.IsNullOrEmpty(ClientId))
        {
            queryString.Add($"clientId={ClientId}");
        }
        
        if (queryString.Any())
        {
            backUrl += "?" + string.Join("&", queryString);
        }
        
        return backUrl;
    }
}