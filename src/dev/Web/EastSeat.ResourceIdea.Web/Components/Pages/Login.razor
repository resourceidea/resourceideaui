@page "/login"
@layout PublicLayout
@attribute [AllowAnonymous]
@inherits ResourceIdeaComponentBase
@using EastSeat.ResourceIdea.Application.Features.Authentication.Commands
@using EastSeat.ResourceIdea.Domain.Users.Models
@using EastSeat.ResourceIdea.Web.Components.Base
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using MediatR
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login - ResourceIdea</PageTitle>

<link href="~/css/components/login.css" rel="stylesheet" />

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="brand-logo">
                <img src="/images/resourceidea-logo.svg" alt="ResourceIdea Logo" style="height: 48px; width: auto;"
                    onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                <div class="text-logo" style="display: none;">
                    <span class="text-logo-icon">ðŸ’¡</span>
                    <span class="text-logo-text">ResourceIdea</span>
                </div>
            </div>
            <h2 class="login-title">Welcome to ResourceIdea</h2>
            <p class="login-subtitle">Sign in to your account</p>
        </div>

        <EditForm Model="LoginModel" OnValidSubmit="HandleLogin" FormName="login" class="login-form">
            <DataAnnotationsValidator />

            @if (HasError)
            {
                <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }

            <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="LoginModel.Email" class="form-control" id="email" placeholder="Enter your email" />
                <ValidationMessage For="() => LoginModel.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="LoginModel.Password" class="form-control" id="password"
                    placeholder="Enter your password" />
                <ValidationMessage For="() => LoginModel.Password" class="text-danger" />
            </div>

            <div class="form-check">
                <InputCheckbox @bind-Value="RememberMe" class="form-check-input" id="remember-me" />
                <label class="form-check-label" for="remember-me">
                    Remember me
                </label>
            </div>

            <button type="submit" class="login-btn" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm login-loading-spinner" role="status" aria-hidden="true"></span>
                    <text>Signing in...</text>
                }
                else
                {
                    <text>Sign In</text>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel LoginModel { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ExecuteAsync(async () =>
        {
            // Check if user is already authenticated
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                // Validate that the authenticated user has required claims


                // We can use the authentication service directly for validation
                // For now, just navigate to the return URL or default page
                Navigation.NavigateTo(ReturnUrl ?? "/employees", true);
            }
        }, "Checking authentication status");
    }

    private async Task HandleLogin()
    {
        await ExecuteAsync(async () =>
        {
            var command = new LoginCommand
            {
                Email = LoginModel.Email ?? string.Empty,
                Password = LoginModel.Password ?? string.Empty,
                RememberMe = RememberMe,
                ReturnUrl = ReturnUrl
            };

            var result = await Mediator.Send(command);

            if (result.IsSuccess && result.Content.HasValue && result.Content.Value.IsSuccess)
            {
                // Successful login - navigate to return URL or default page
                var redirectUrl = result.Content.Value.RedirectUrl ?? "/employees";
                Navigation.NavigateTo(redirectUrl, true);
            }
            else if (result.Content.HasValue)
            {
                // Login failed with a specific error message
                SetError(result.Content.Value.ErrorMessage ?? "Login failed. Please try again.");
            }
            else
            {
                // Generic failure
                SetError("An error occurred during sign in. Please try again.");
            }
        }, "Processing login");
    }
}