@page "/login"
@layout PublicLayout
@attribute [AllowAnonymous]
@using EastSeat.ResourceIdea.DataStore.Identity.Entities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Login> Logger

<PageTitle>Login - ResourceIdea</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="brand-logo">
                <img src="/images/resourceidea-logo.svg" alt="ResourceIdea Logo" style="height: 48px; width: auto;"
                    onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                <div class="text-logo" style="display: none;">
                    <span class="text-logo-icon">ðŸ’¡</span>
                    <span class="text-logo-text">ResourceIdea</span>
                </div>
            </div>
            <h2 class="login-title">Welcome to ResourceIdea</h2>
            <p class="login-subtitle">Sign in to your account</p>
        </div>

        <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" id="email" placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password"
                    placeholder="Enter your password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary login-btn" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <text>Signing in...</text>
                }
                else
                {
                    <text>Sign In</text>
                }
            </button>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #00879c 0%, #006b7d 100%);
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        padding: 40px;
        width: 100%;
        max-width: 400px;
    }

    .login-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .brand-logo {
        margin-bottom: 20px;
    }

    .text-logo {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .text-logo-icon {
        font-size: 32px;
    }

    .text-logo-text {
        font-size: 24px;
        font-weight: 700;
        color: #00879c;
    }

    .login-title {
        color: #00879c;
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 8px;
    }

    .login-subtitle {
        color: #6c757d;
        font-size: 1rem;
        margin-bottom: 0;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group:last-of-type {
        margin-bottom: 25px;
    }

    .form-label {
        color: #495057;
        font-weight: 500;
        margin-bottom: 8px;
    }

    .form-control {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 12px 16px;
        font-size: 1rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus {
        border-color: #00879c;
        box-shadow: 0 0 0 0.2rem rgba(0, 135, 156, 0.25);
    }

    .form-check {
        margin-bottom: 25px;
    }

    .form-check-label {
        color: #495057;
        font-size: 0.95rem;
    }

    .login-btn {
        width: 100%;
        background-color: #00879c;
        border-color: #00879c;
        border-radius: 8px;
        padding: 12px;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.15s ease-in-out;
    }

    .login-btn:hover:not(:disabled) {
        background-color: #006b7d;
        border-color: #006b7d;
        transform: translateY(-1px);
    }

    .login-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .alert {
        border-radius: 8px;
        margin-bottom: 20px;
    }
</style>

@code {
    private string? errorMessage;
    private bool isLoading;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Check if this is a fresh session or persistent login
            var sessionTime = authState.User.FindFirst("SessionStartTime");
            var currentTime = DateTimeOffset.UtcNow;

            // If no session time claim, this might be a stale session
            if (sessionTime == null)
            {
                Logger.LogWarning("User {UserName} has no session time claim. Forcing re-authentication.",
                authState.User.Identity.Name);
                await SignOutAndRedirectToLogin();
                return;
            }

            // Check if session is older than 12 hours (force re-authentication)
            if (DateTimeOffset.TryParse(sessionTime.Value, out var sessionStart))
            {
                if (currentTime.Subtract(sessionStart).TotalHours > 12)
                {
                    Logger.LogInformation("User {UserName} session expired. Forcing re-authentication.",
                    authState.User.Identity.Name);
                    await SignOutAndRedirectToLogin();
                    return;
                }
            }

            // Validate that the authenticated user has required claims
            if (ValidateUserClaims(authState.User))
            {
                Logger.LogInformation("User {UserName} already authenticated with valid claims. Redirecting.",
                authState.User.Identity.Name);
                Navigation.NavigateTo(ReturnUrl ?? "/employees", true);
            }
            else
            {
                // User is authenticated but missing required claims - force logout
                Logger.LogWarning("User {UserName} is authenticated but missing required claims. Forcing logout.",
                authState.User.Identity.Name);
                await SignOutAndRedirectToLogin();
            }
        }
    }

    private async Task LoginUser()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var result = await SignInManager.PasswordSignInAsync(
            Input.Email,
            Input.Password,
            isPersistent: false, // Force non-persistent login regardless of RememberMe
            lockoutOnFailure: true);

            if (result.Succeeded)
            {
                Logger.LogInformation("User {UserName} logged in successfully.", Input.Email);

                // Clear any existing session storage
                await ProtectedSessionStore.DeleteAsync("UserSession");

                // Create new session data
                var sessionData = new
                {
                    LoginTime = DateTimeOffset.UtcNow,
                    UserEmail = Input.Email,
                    SessionId = Guid.NewGuid().ToString()
                };
                await ProtectedSessionStore.SetAsync("UserSession", sessionData);

                Navigation.NavigateTo(ReturnUrl ?? "/employees", true);
            }
            else if (result.IsLockedOut)
            {
                errorMessage = "This account has been locked out. Please try again later.";
                Logger.LogWarning("User {UserName} account is locked.", Input.Email);
            }
            else if (result.IsNotAllowed)
            {
                errorMessage = "Sign in is not allowed for this account.";
                Logger.LogWarning("Login not allowed for user {UserName}.", Input.Email);
            }
            else
            {
                errorMessage = "Invalid email or password.";
                Logger.LogWarning("Failed login attempt for user {UserName}.", Input.Email);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during sign in. Please try again.";
            Logger.LogError(ex, "Error during login for user {UserName}.", Input.Email);
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Validates that an authenticated user has all required claims for proper access.
    /// </summary>
    /// <param name="user">The authenticated user's ClaimsPrincipal</param>
    /// <returns>True if the user has all required claims, false otherwise</returns>
    private bool ValidateUserClaims(ClaimsPrincipal user)
    {
        try
        {
            // Check if TenantId claim exists and is valid
            var tenantIdClaim = user.FindFirst("TenantId")?.Value?.Trim();
            if (string.IsNullOrEmpty(tenantIdClaim))
            {
                Logger.LogWarning("User {UserName} is missing TenantId claim", user.Identity?.Name);
                return false;
            }

            // Validate that TenantId is a valid GUID
            if (!Guid.TryParse(tenantIdClaim, out var tenantId) || tenantId == Guid.Empty)
            {
                Logger.LogWarning("User {UserName} has invalid TenantId claim: {TenantId}", user.Identity?.Name, tenantIdClaim);
                return false;
            }

            // Check if IsBackendRole claim exists (this should be added by TenantClaimsTransformation)
            var isBackendRoleClaim = user.FindFirst("IsBackendRole")?.Value?.Trim();
            if (string.IsNullOrEmpty(isBackendRoleClaim))
            {
                Logger.LogWarning("User {UserName} is missing IsBackendRole claim", user.Identity?.Name);
                return false;
            }

            Logger.LogInformation("User {UserName} has valid claims. TenantId: {TenantId}, IsBackendRole: {IsBackendRole}",
            user.Identity?.Name, tenantIdClaim, isBackendRoleClaim);
            return true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error validating user claims for {UserName}", user.Identity?.Name);
            return false;
        }
    }

    /// <summary>
    /// Signs out the current user and redirects to login page.
    /// </summary>
    private async Task SignOutAndRedirectToLogin()
    {
        try
        {
            await SignInManager.SignOutAsync();
            Logger.LogInformation("User signed out due to invalid claims");

            // Clear any session storage that might contain stale data
            await ProtectedSessionStore.DeleteAsync("UserSession");

            // Redirect to login page with current return URL
            var loginUrl = $"/login{(string.IsNullOrEmpty(ReturnUrl) ? "" : $"?returnUrl={Uri.EscapeDataString(ReturnUrl)}")}";
            Navigation.NavigateTo(loginUrl, true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during forced sign out");
            // If sign out fails, still redirect to login
            Navigation.NavigateTo("/login", true);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;
    }
}