@* ------------------------------------------------------------------------------
    File: TenantEngagementsList.razor
    Path: src/dev/Web/EastSeat.ResourceIdea.Web/Components/Shared/Lists
    Description: Tenant Engagements List component
   ------------------------------------------------------------------------------ *@

@using Microsoft.AspNetCore.Components.Routing
@using EastSeat.ResourceIdea.Domain.Engagements.Models
@using EastSeat.ResourceIdea.Application.Features.Common.ValueObjects

<div class="card mt-1">
    <table class="table table-sm table-striped table-hover table-borderless">
        <thead>
            <tr>
                <th>Description</th>
                <th>Client</th>
                <th>Status</th>
                <th>Start Date</th>
                <th>End Date</th>
            </tr>
        </thead>
        <tbody>
            @if (PagedEngagementsList != null && PagedEngagementsList.Items.Count > 0)
            {
                foreach (var engagement in PagedEngagementsList.Items)
                {
                    <tr>
                        <td>
                            <NavLink class="text-decoration-none" href=@($"/engagements/{engagement.Id.Value}")>
                                @engagement.Description
                            </NavLink>
                        </td>
                        <td>
                            <NavLink class="text-decoration-none" href=@($"/clients/{engagement.ClientId.Value}")>
                                Client @engagement.ClientId.Value
                            </NavLink>
                        </td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(engagement.Status)">
                                @engagement.Status.ToString()
                            </span>
                        </td>
                        <td>
                            @if (engagement.CommencementDate.HasValue)
                            {
                                @engagement.CommencementDate.Value.ToString("MMM dd, yyyy")
                            }
                            else
                            {
                                <span class="text-muted">Not started</span>
                            }
                        </td>
                        <td>
                            @if (engagement.CompletionDate.HasValue)
                            {
                                @engagement.CompletionDate.Value.ToString("MMM dd, yyyy")
                            }
                            else
                            {
                                <span class="text-muted">Ongoing</span>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <div class="text-muted">
                            <i class="fa-solid fa-handshake fa-2x mb-3"></i>
                            <p class="mb-1">No engagements found</p>
                            <small>No engagements have been created yet</small>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (PagedEngagementsList != null && PagedEngagementsList.TotalCount > 0)
    {
        <div class="card-footer d-flex justify-content-between align-items-center">
            <div>
                <span>Page @(PagedEngagementsList.CurrentPage) of @PagedEngagementsList.Pages</span>
                <span class="text-muted ms-2">(@PagedEngagementsList.TotalCount total engagements)</span>
            </div>
            <div>
                <button class="btn btn-outline-secondary btn-sm me-2" @onclick="GoToPreviousPage"
                    disabled="@(PagedEngagementsList.CurrentPage <= 1)">
                    Previous
                </button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="GoToNextPage"
                    disabled="@(!PagedEngagementsList.HasNextPage)">
                    Next
                </button>
            </div>
        </div>
    }

</div>
<br />

@code {
    [Parameter]
    public PagedListResponse<EngagementModel>? PagedEngagementsList { get; set; }

    [Parameter]
    public EventCallback<int> OnEngagementsPageChange { get; set; }

    private async Task GoToPreviousPage()
    {
        if (PagedEngagementsList != null && PagedEngagementsList.CurrentPage > 1)
        {
            await OnEngagementsPageChange.InvokeAsync(PagedEngagementsList.CurrentPage - 1);
        }
    }

    private async Task GoToNextPage()
    {
        if (PagedEngagementsList != null && PagedEngagementsList.HasNextPage)
        {
            await OnEngagementsPageChange.InvokeAsync(PagedEngagementsList.CurrentPage + 1);
        }
    }

    private string GetStatusBadgeClass(EastSeat.ResourceIdea.Domain.Enums.EngagementStatus status)
    {
        return status switch
        {
            EastSeat.ResourceIdea.Domain.Enums.EngagementStatus.NotStarted => "bg-secondary",
            EastSeat.ResourceIdea.Domain.Enums.EngagementStatus.InProgress => "bg-primary",
            EastSeat.ResourceIdea.Domain.Enums.EngagementStatus.Completed => "bg-success",
            EastSeat.ResourceIdea.Domain.Enums.EngagementStatus.Canceled => "bg-danger",
            _ => "bg-secondary"
        };
    }
}